{"ast":null,"code":"/**\r\n * Copyright 2016 Google Inc. All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This generated service worker JavaScript will precache your site's resources.\n// The code needs to be saved in a .js file at the top-level of your site, and registered\n// from your pages in order to be used. See\n// https://github.com/googlechrome/sw-precache/blob/master/demo/app/js/service-worker-registration.js\n// for an example of how you can register this script and handle various service worker events.\n\n/* eslint-env worker, serviceworker */\n\n/* eslint-disable indent, no-unused-vars, no-multiple-empty-lines, max-nested-callbacks, space-before-function-paren */\n'use strict';\n/* eslint-disable quotes, comma-spacing */\n\nvar PrecacheConfig = [[\"/bower_components/webcomponentsjs/webcomponents-lite.min.js\", \"f04ed23700daeb36f637bfe095960659\"], [\"/index.html\", \"6018d0295f8faf690e2878af152ecbbc\"], [\"/manifest.json\", \"2eefc15db4b58758cddc0d666e27d399\"], [\"/src/my-app.html\", \"7e5dee7784534c0ccc50f8ec71bccd3f\"], [\"/src/my-view1.html\", \"4ccb8d9cd5b87a92973cc7704873b65f\"], [\"/src/my-view2.html\", \"7e00f1613408e109e6d26853846c8467\"], [\"/src/my-view3.html\", \"1971572d82bd5c7e058dce75bdd068df\"], [\"/src/my-view404.html\", \"858fecebfa5de274e8d3f7ba905d599e\"]];\n/* eslint-enable quotes, comma-spacing */\n\nvar CacheNamePrefix = 'sw-precache-v1--' + (self.registration ? self.registration.scope : '') + '-';\nvar IgnoreUrlParametersMatching = [/^utm_/];\nvar self = this;\n\nvar addDirectoryIndex = function (originalUrl, index) {\n  var url = new URL(originalUrl);\n\n  if (url.pathname.slice(-1) === '/') {\n    url.pathname += index;\n  }\n\n  return url.toString();\n};\n\nvar getCacheBustedUrl = function (url, param) {\n  param = param || Date.now();\n  var urlWithCacheBusting = new URL(url);\n  urlWithCacheBusting.search += (urlWithCacheBusting.search ? '&' : '') + 'sw-precache=' + param;\n  return urlWithCacheBusting.toString();\n};\n\nvar isPathWhitelisted = function (whitelist, absoluteUrlString) {\n  // If the whitelist is empty, then consider all URLs to be whitelisted.\n  if (whitelist.length === 0) {\n    return true;\n  } // Otherwise compare each path regex to the path of the URL passed in.\n\n\n  var path = new URL(absoluteUrlString).pathname;\n  return whitelist.some(function (whitelistedPathRegex) {\n    return path.match(whitelistedPathRegex);\n  });\n};\n\nvar populateCurrentCacheNames = function (precacheConfig, cacheNamePrefix, baseUrl) {\n  var absoluteUrlToCacheName = {};\n  var currentCacheNamesToAbsoluteUrl = {};\n  precacheConfig.forEach(function (cacheOption) {\n    var absoluteUrl = new URL(cacheOption[0], baseUrl).toString();\n    var cacheName = cacheNamePrefix + absoluteUrl + '-' + cacheOption[1];\n    currentCacheNamesToAbsoluteUrl[cacheName] = absoluteUrl;\n    absoluteUrlToCacheName[absoluteUrl] = cacheName;\n  });\n  return {\n    absoluteUrlToCacheName: absoluteUrlToCacheName,\n    currentCacheNamesToAbsoluteUrl: currentCacheNamesToAbsoluteUrl\n  };\n};\n\nvar stripIgnoredUrlParameters = function (originalUrl, ignoreUrlParametersMatching) {\n  var url = new URL(originalUrl);\n  url.search = url.search.slice(1) // Exclude initial '?'\n  .split('&') // Split into an array of 'key=value' strings\n  .map(function (kv) {\n    return kv.split('='); // Split each 'key=value' string into a [key, value] array\n  }).filter(function (kv) {\n    return ignoreUrlParametersMatching.every(function (ignoredRegex) {\n      return !ignoredRegex.test(kv[0]); // Return true iff the key doesn't match any of the regexes.\n    });\n  }).map(function (kv) {\n    return kv.join('='); // Join each [key, value] array into a 'key=value' string\n  }).join('&'); // Join the array of 'key=value' strings into a string with '&' in between each\n\n  return url.toString();\n};\n\nvar mappings = populateCurrentCacheNames(PrecacheConfig, CacheNamePrefix, self.location);\nvar AbsoluteUrlToCacheName = mappings.absoluteUrlToCacheName;\nvar CurrentCacheNamesToAbsoluteUrl = mappings.currentCacheNamesToAbsoluteUrl;\n\nfunction deleteAllCaches() {\n  return caches.keys().then(function (cacheNames) {\n    return Promise.all(cacheNames.map(function (cacheName) {\n      return caches.delete(cacheName);\n    }));\n  });\n}\n\nself.addEventListener('install', function (event) {\n  event.waitUntil( // Take a look at each of the cache names we expect for this version.\n  Promise.all(Object.keys(CurrentCacheNamesToAbsoluteUrl).map(function (cacheName) {\n    return caches.open(cacheName).then(function (cache) {\n      // Get a list of all the entries in the specific named cache.\n      // For caches that are already populated for a given version of a\n      // resource, there should be 1 entry.\n      return cache.keys().then(function (keys) {\n        // If there are 0 entries, either because this is a brand new version\n        // of a resource or because the install step was interrupted the\n        // last time it ran, then we need to populate the cache.\n        if (keys.length === 0) {\n          // Use the last bit of the cache name, which contains the hash,\n          // as the cache-busting parameter.\n          // See https://github.com/GoogleChrome/sw-precache/issues/100\n          var cacheBustParam = cacheName.split('-').pop();\n          var urlWithCacheBusting = getCacheBustedUrl(CurrentCacheNamesToAbsoluteUrl[cacheName], cacheBustParam);\n          var request = new Request(urlWithCacheBusting, {\n            credentials: 'same-origin'\n          });\n          return fetch(request).then(function (response) {\n            if (response.ok) {\n              return cache.put(CurrentCacheNamesToAbsoluteUrl[cacheName], response);\n            }\n\n            console.error('Request for %s returned a response status %d, ' + 'so not attempting to cache it.', urlWithCacheBusting, response.status); // Get rid of the empty cache if we can't add a successful response to it.\n\n            return caches.delete(cacheName);\n          });\n        }\n      });\n    });\n  })).then(function () {\n    return caches.keys().then(function (allCacheNames) {\n      return Promise.all(allCacheNames.filter(function (cacheName) {\n        return cacheName.indexOf(CacheNamePrefix) === 0 && !(cacheName in CurrentCacheNamesToAbsoluteUrl);\n      }).map(function (cacheName) {\n        return caches.delete(cacheName);\n      }));\n    });\n  }).then(function () {\n    if (typeof self.skipWaiting === 'function') {\n      // Force the SW to transition from installing -> active state\n      self.skipWaiting();\n    }\n  }));\n});\n\nif (self.clients && typeof self.clients.claim === 'function') {\n  self.addEventListener('activate', function (event) {\n    event.waitUntil(self.clients.claim());\n  });\n}\n\nself.addEventListener('message', function (event) {\n  if (event.data.command === 'delete_all') {\n    console.log('About to delete all caches...');\n    deleteAllCaches().then(function () {\n      console.log('Caches deleted.');\n      event.ports[0].postMessage({\n        error: null\n      });\n    }).catch(function (error) {\n      console.log('Caches not deleted:', error);\n      event.ports[0].postMessage({\n        error: error\n      });\n    });\n  }\n});\nself.addEventListener('fetch', function (event) {\n  if (event.request.method === 'GET') {\n    var urlWithoutIgnoredParameters = stripIgnoredUrlParameters(event.request.url, IgnoreUrlParametersMatching);\n    var cacheName = AbsoluteUrlToCacheName[urlWithoutIgnoredParameters];\n    var directoryIndex = 'index.html';\n\n    if (!cacheName && directoryIndex) {\n      urlWithoutIgnoredParameters = addDirectoryIndex(urlWithoutIgnoredParameters, directoryIndex);\n      cacheName = AbsoluteUrlToCacheName[urlWithoutIgnoredParameters];\n    }\n\n    var navigateFallback = '/index.html'; // Ideally, this would check for event.request.mode === 'navigate', but that is not widely\n    // supported yet:\n    // https://code.google.com/p/chromium/issues/detail?id=540967\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1209081\n\n    if (!cacheName && navigateFallback && event.request.headers.has('accept') && event.request.headers.get('accept').includes('text/html') &&\n    /* eslint-disable quotes, comma-spacing */\n    isPathWhitelisted([], event.request.url)) {\n      /* eslint-enable quotes, comma-spacing */\n      var navigateFallbackUrl = new URL(navigateFallback, self.location);\n      cacheName = AbsoluteUrlToCacheName[navigateFallbackUrl.toString()];\n    }\n\n    if (cacheName) {\n      event.respondWith( // Rely on the fact that each cache we manage should only have one entry, and return that.\n      caches.open(cacheName).then(function (cache) {\n        return cache.keys().then(function (keys) {\n          return cache.match(keys[0]).then(function (response) {\n            if (response) {\n              return response;\n            } // If for some reason the response was deleted from the cache,\n            // raise and exception and fall back to the fetch() triggered in the catch().\n\n\n            throw Error('The cache ' + cacheName + ' is empty.');\n          });\n        });\n      }).catch(function (e) {\n        console.warn('Couldn\\'t serve response for \"%s\" from cache: %O', event.request.url, e);\n        return fetch(event.request);\n      }));\n    }\n  }\n});","map":{"version":3,"sources":["G:/lavonu_video/Intelektika/Saitynai/test/commonwealth-frontend/src/serviceWorker.js"],"names":["PrecacheConfig","CacheNamePrefix","self","registration","scope","IgnoreUrlParametersMatching","addDirectoryIndex","originalUrl","index","url","URL","pathname","slice","toString","getCacheBustedUrl","param","Date","now","urlWithCacheBusting","search","isPathWhitelisted","whitelist","absoluteUrlString","length","path","some","whitelistedPathRegex","match","populateCurrentCacheNames","precacheConfig","cacheNamePrefix","baseUrl","absoluteUrlToCacheName","currentCacheNamesToAbsoluteUrl","forEach","cacheOption","absoluteUrl","cacheName","stripIgnoredUrlParameters","ignoreUrlParametersMatching","split","map","kv","filter","every","ignoredRegex","test","join","mappings","location","AbsoluteUrlToCacheName","CurrentCacheNamesToAbsoluteUrl","deleteAllCaches","caches","keys","then","cacheNames","Promise","all","delete","addEventListener","event","waitUntil","Object","open","cache","cacheBustParam","pop","request","Request","credentials","fetch","response","ok","put","console","error","status","allCacheNames","indexOf","skipWaiting","clients","claim","data","command","log","ports","postMessage","catch","method","urlWithoutIgnoredParameters","directoryIndex","navigateFallback","headers","has","get","includes","navigateFallbackUrl","respondWith","Error","e","warn"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2016 Google Inc. All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// This generated service worker JavaScript will precache your site's resources.\r\n// The code needs to be saved in a .js file at the top-level of your site, and registered\r\n// from your pages in order to be used. See\r\n// https://github.com/googlechrome/sw-precache/blob/master/demo/app/js/service-worker-registration.js\r\n// for an example of how you can register this script and handle various service worker events.\r\n\r\n/* eslint-env worker, serviceworker */\r\n/* eslint-disable indent, no-unused-vars, no-multiple-empty-lines, max-nested-callbacks, space-before-function-paren */\r\n'use strict';\r\n\r\n\r\n\r\n\r\n\r\n/* eslint-disable quotes, comma-spacing */\r\nvar PrecacheConfig = [[\"/bower_components/webcomponentsjs/webcomponents-lite.min.js\",\"f04ed23700daeb36f637bfe095960659\"],[\"/index.html\",\"6018d0295f8faf690e2878af152ecbbc\"],[\"/manifest.json\",\"2eefc15db4b58758cddc0d666e27d399\"],[\"/src/my-app.html\",\"7e5dee7784534c0ccc50f8ec71bccd3f\"],[\"/src/my-view1.html\",\"4ccb8d9cd5b87a92973cc7704873b65f\"],[\"/src/my-view2.html\",\"7e00f1613408e109e6d26853846c8467\"],[\"/src/my-view3.html\",\"1971572d82bd5c7e058dce75bdd068df\"],[\"/src/my-view404.html\",\"858fecebfa5de274e8d3f7ba905d599e\"]];\r\n/* eslint-enable quotes, comma-spacing */\r\nvar CacheNamePrefix = 'sw-precache-v1--' + (self.registration ? self.registration.scope : '') + '-';\r\n\r\n\r\nvar IgnoreUrlParametersMatching = [/^utm_/];\r\n\r\nvar self = this;\r\n\r\n\r\n\r\nvar addDirectoryIndex = function (originalUrl, index) {\r\n    var url = new URL(originalUrl);\r\n    if (url.pathname.slice(-1) === '/') {\r\n      url.pathname += index;\r\n    }\r\n    return url.toString();\r\n  };\r\n\r\nvar getCacheBustedUrl = function (url, param) {\r\n    param = param || Date.now();\r\n\r\n    var urlWithCacheBusting = new URL(url);\r\n    urlWithCacheBusting.search += (urlWithCacheBusting.search ? '&' : '') +\r\n      'sw-precache=' + param;\r\n\r\n    return urlWithCacheBusting.toString();\r\n  };\r\n\r\nvar isPathWhitelisted = function (whitelist, absoluteUrlString) {\r\n    // If the whitelist is empty, then consider all URLs to be whitelisted.\r\n    if (whitelist.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // Otherwise compare each path regex to the path of the URL passed in.\r\n    var path = (new URL(absoluteUrlString)).pathname;\r\n    return whitelist.some(function(whitelistedPathRegex) {\r\n      return path.match(whitelistedPathRegex);\r\n    });\r\n  };\r\n\r\nvar populateCurrentCacheNames = function (precacheConfig,\r\n    cacheNamePrefix, baseUrl) {\r\n    var absoluteUrlToCacheName = {};\r\n    var currentCacheNamesToAbsoluteUrl = {};\r\n\r\n    precacheConfig.forEach(function(cacheOption) {\r\n      var absoluteUrl = new URL(cacheOption[0], baseUrl).toString();\r\n      var cacheName = cacheNamePrefix + absoluteUrl + '-' + cacheOption[1];\r\n      currentCacheNamesToAbsoluteUrl[cacheName] = absoluteUrl;\r\n      absoluteUrlToCacheName[absoluteUrl] = cacheName;\r\n    });\r\n\r\n    return {\r\n      absoluteUrlToCacheName: absoluteUrlToCacheName,\r\n      currentCacheNamesToAbsoluteUrl: currentCacheNamesToAbsoluteUrl\r\n    };\r\n  };\r\n\r\nvar stripIgnoredUrlParameters = function (originalUrl,\r\n    ignoreUrlParametersMatching) {\r\n    var url = new URL(originalUrl);\r\n\r\n    url.search = url.search.slice(1) // Exclude initial '?'\r\n      .split('&') // Split into an array of 'key=value' strings\r\n      .map(function(kv) {\r\n        return kv.split('='); // Split each 'key=value' string into a [key, value] array\r\n      })\r\n      .filter(function(kv) {\r\n        return ignoreUrlParametersMatching.every(function(ignoredRegex) {\r\n          return !ignoredRegex.test(kv[0]); // Return true iff the key doesn't match any of the regexes.\r\n        });\r\n      })\r\n      .map(function(kv) {\r\n        return kv.join('='); // Join each [key, value] array into a 'key=value' string\r\n      })\r\n      .join('&'); // Join the array of 'key=value' strings into a string with '&' in between each\r\n\r\n    return url.toString();\r\n  };\r\n\r\n\r\nvar mappings = populateCurrentCacheNames(PrecacheConfig, CacheNamePrefix, self.location);\r\nvar AbsoluteUrlToCacheName = mappings.absoluteUrlToCacheName;\r\nvar CurrentCacheNamesToAbsoluteUrl = mappings.currentCacheNamesToAbsoluteUrl;\r\n\r\nfunction deleteAllCaches() {\r\n  return caches.keys().then(function(cacheNames) {\r\n    return Promise.all(\r\n      cacheNames.map(function(cacheName) {\r\n        return caches.delete(cacheName);\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\nself.addEventListener('install', function(event) {\r\n  event.waitUntil(\r\n    // Take a look at each of the cache names we expect for this version.\r\n    Promise.all(Object.keys(CurrentCacheNamesToAbsoluteUrl).map(function(cacheName) {\r\n      return caches.open(cacheName).then(function(cache) {\r\n        // Get a list of all the entries in the specific named cache.\r\n        // For caches that are already populated for a given version of a\r\n        // resource, there should be 1 entry.\r\n        return cache.keys().then(function(keys) {\r\n          // If there are 0 entries, either because this is a brand new version\r\n          // of a resource or because the install step was interrupted the\r\n          // last time it ran, then we need to populate the cache.\r\n          if (keys.length === 0) {\r\n            // Use the last bit of the cache name, which contains the hash,\r\n            // as the cache-busting parameter.\r\n            // See https://github.com/GoogleChrome/sw-precache/issues/100\r\n            var cacheBustParam = cacheName.split('-').pop();\r\n            var urlWithCacheBusting = getCacheBustedUrl(\r\n              CurrentCacheNamesToAbsoluteUrl[cacheName], cacheBustParam);\r\n\r\n            var request = new Request(urlWithCacheBusting,\r\n              {credentials: 'same-origin'});\r\n            return fetch(request).then(function(response) {\r\n              if (response.ok) {\r\n                return cache.put(CurrentCacheNamesToAbsoluteUrl[cacheName],\r\n                  response);\r\n              }\r\n\r\n              console.error('Request for %s returned a response status %d, ' +\r\n                'so not attempting to cache it.',\r\n                urlWithCacheBusting, response.status);\r\n              // Get rid of the empty cache if we can't add a successful response to it.\r\n              return caches.delete(cacheName);\r\n            });\r\n          }\r\n        });\r\n      });\r\n    })).then(function() {\r\n      return caches.keys().then(function(allCacheNames) {\r\n        return Promise.all(allCacheNames.filter(function(cacheName) {\r\n          return cacheName.indexOf(CacheNamePrefix) === 0 &&\r\n            !(cacheName in CurrentCacheNamesToAbsoluteUrl);\r\n          }).map(function(cacheName) {\r\n            return caches.delete(cacheName);\r\n          })\r\n        );\r\n      });\r\n    }).then(function() {\r\n      if (typeof self.skipWaiting === 'function') {\r\n        // Force the SW to transition from installing -> active state\r\n        self.skipWaiting();\r\n      }\r\n    })\r\n  );\r\n});\r\n\r\nif (self.clients && (typeof self.clients.claim === 'function')) {\r\n  self.addEventListener('activate', function(event) {\r\n    event.waitUntil(self.clients.claim());\r\n  });\r\n}\r\n\r\nself.addEventListener('message', function(event) {\r\n  if (event.data.command === 'delete_all') {\r\n    console.log('About to delete all caches...');\r\n    deleteAllCaches().then(function() {\r\n      console.log('Caches deleted.');\r\n      event.ports[0].postMessage({\r\n        error: null\r\n      });\r\n    }).catch(function(error) {\r\n      console.log('Caches not deleted:', error);\r\n      event.ports[0].postMessage({\r\n        error: error\r\n      });\r\n    });\r\n  }\r\n});\r\n\r\n\r\nself.addEventListener('fetch', function(event) {\r\n  if (event.request.method === 'GET') {\r\n    var urlWithoutIgnoredParameters = stripIgnoredUrlParameters(event.request.url,\r\n      IgnoreUrlParametersMatching);\r\n\r\n    var cacheName = AbsoluteUrlToCacheName[urlWithoutIgnoredParameters];\r\n    var directoryIndex = 'index.html';\r\n    if (!cacheName && directoryIndex) {\r\n      urlWithoutIgnoredParameters = addDirectoryIndex(urlWithoutIgnoredParameters, directoryIndex);\r\n      cacheName = AbsoluteUrlToCacheName[urlWithoutIgnoredParameters];\r\n    }\r\n\r\n    var navigateFallback = '/index.html';\r\n    // Ideally, this would check for event.request.mode === 'navigate', but that is not widely\r\n    // supported yet:\r\n    // https://code.google.com/p/chromium/issues/detail?id=540967\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1209081\r\n    if (!cacheName && navigateFallback && event.request.headers.has('accept') &&\r\n        event.request.headers.get('accept').includes('text/html') &&\r\n        /* eslint-disable quotes, comma-spacing */\r\n        isPathWhitelisted([], event.request.url)) {\r\n        /* eslint-enable quotes, comma-spacing */\r\n      var navigateFallbackUrl = new URL(navigateFallback, self.location);\r\n      cacheName = AbsoluteUrlToCacheName[navigateFallbackUrl.toString()];\r\n    }\r\n\r\n    if (cacheName) {\r\n      event.respondWith(\r\n        // Rely on the fact that each cache we manage should only have one entry, and return that.\r\n        caches.open(cacheName).then(function(cache) {\r\n          return cache.keys().then(function(keys) {\r\n            return cache.match(keys[0]).then(function(response) {\r\n              if (response) {\r\n                return response;\r\n              }\r\n              // If for some reason the response was deleted from the cache,\r\n              // raise and exception and fall back to the fetch() triggered in the catch().\r\n              throw Error('The cache ' + cacheName + ' is empty.');\r\n            });\r\n          });\r\n        }).catch(function(e) {\r\n          console.warn('Couldn\\'t serve response for \"%s\" from cache: %O', event.request.url, e);\r\n          return fetch(event.request);\r\n        })\r\n      );\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}